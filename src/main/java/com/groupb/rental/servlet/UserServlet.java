package com.groupb.rental.servlet;

import com.groupb.rental.model.User;
import com.groupb.rental.dao.UserDAOInterface;
import com.groupb.rental.dao.UserDAOImpl;
import javax.servlet.*;
import javax.servlet.http.*;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.logging.Logger;

/**
 * Handles user-related operations such as registration, login, and logout.
 */
public class UserServlet extends HttpServlet {

    private static final Logger logger = Logger.getLogger(UserServlet.class.getName());

    /**
     * Processes GET requests, which may include forwarding to registration or login pages, or handling logout.
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Determine the action parameter to decide which page to display
        String action = request.getParameter("action");
        if(action == null) action = "loginPage";
        switch(action) {
            case "registerPage":
                logger.info("Forwarding to registration page.");
                RequestDispatcher dispatcher = request.getRequestDispatcher("register.jsp");
                dispatcher.forward(request, response);
                break;
            case "logout":
                logger.info("Logging out user.");
                HttpSession session = request.getSession();
                session.invalidate();
                response.sendRedirect("login.jsp");
                break;
            default: 
                logger.info("Forwarding to login page.");
                RequestDispatcher dispatcherLogin = request.getRequestDispatcher("login.jsp");
                dispatcherLogin.forward(request, response);
                break;
        }
    }

    /**
     * Processes POST requests for user registration and login.
     * For registration, it validates the input (email pattern and password requirements) before proceeding.
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        UserDAOInterface userDAO = new UserDAOImpl();
        
        if("register".equals(action)) {
            // Retrieve form parameters for registration
            String username = request.getParameter("username");
            String password = request.getParameter("password");
            String email = request.getParameter("email");
            String role = request.getParameter("role"); // Role from the registration form

            logger.info("Attempting to register user: " + username);

            // Validate email and password before creating the user account
            if (!isValidEmail(email)) {
                logger.warning("Invalid email format for: " + email);
                // Redirect back to the registration page with an error message
                response.sendRedirect("register.jsp?error=Invalid email format");
                return;
            }
            if (!isValidPassword(password)) {
                logger.warning("Password does not meet requirements for user: " + username);
                // Redirect back to the registration page with an error message
                response.sendRedirect("register.jsp?error=Password does not meet requirements");
                return;
            }

            // Build User object if validations pass
            User user = new User();
            user.setId(0); // Assuming id is auto-generated by the database
            user.setUsername(username);
            user.setPassword(password);
            user.setEmail(email);
            user.setRole(role);

            // Attempt to register the user using the DAO
            boolean registered = userDAO.registerUser(user);
            if(registered) {
                logger.info("User registered successfully: " + username);
                response.sendRedirect("login.jsp");
            } else {
                logger.warning("User registration failed for: " + username);
                response.sendRedirect("register.jsp?error=Registration failed");
            }
        } else if("login".equals(action)) {
            // Process user login
            String username = request.getParameter("username");
            String password = request.getParameter("password");

            logger.info("Attempting login for user: " + username);
            User user = userDAO.login(username, password);
            if(user != null) {
                logger.info("Login successful for user: " + username);
                HttpSession session = request.getSession();
                session.setAttribute("user", user);
                // Check for a stored redirect URL
                String redirectURL = (String) session.getAttribute("redirectAfterLogin");
                if(redirectURL != null) {
                    session.removeAttribute("redirectAfterLogin");
                    response.sendRedirect(redirectURL);
                } else {
                    response.sendRedirect("dashboard.jsp");
                }
            } else {
                logger.warning("Login failed for user: " + username);
                response.sendRedirect("login.jsp?error=Invalid credentials");
            }
        }
    }
    
    /**
     * Validates the email format using a regular expression.
     *
     * @param email The email string to validate.
     * @return true if the email matches the pattern; false otherwise.
     */
    private boolean isValidEmail(String email) {
        // A basic email regex pattern; adjust as necessary for your needs.
        String emailRegex = "^[A-Za-z0-9+_.-]+@(.+)$";
        Pattern pattern = Pattern.compile(emailRegex);
        Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }

    /**
     * Validates the password based on specific requirements.
     * In this example, the password must be at least 8 characters long and contain:
     * - At least one uppercase letter,
     * - At least one lowercase letter,
     * - At least one digit,
     * - At least one special character.
     *
     * @param password The password string to validate.
     * @return true if the password meets the requirements; false otherwise.
     */
    private boolean isValidPassword(String password) {
        // Regex for password validation:
        // ^                 --> start of string
        // (?=.*[0-9])       --> at least one digit
        // (?=.*[a-z])       --> at least one lowercase letter
        // (?=.*[A-Z])       --> at least one uppercase letter
        // (?=.*[@#$%^&+=])  --> at least one special character
        // (?=\\S+$)         --> no whitespace characters allowed
        // .{8,}             --> minimum 8 characters
        // $                 --> end of string
        String passwordRegex = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$";
        Pattern pattern = Pattern.compile(passwordRegex);
        Matcher matcher = pattern.matcher(password);
        return matcher.matches();
    }
}
